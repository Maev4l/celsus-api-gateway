type Query {
  ping: String
  libraries: [Library]!
  library(id: ID!, page: Int! = 1): LibraryDetail
  searchBooks(searchQuery: SearchBooksQuery!): PaginatedBooksList
  contacts: [Contact]!
  contact(id: ID!): Contact
}

type Mutation {
  addLibrary(library: LibraryInput!): Library!
  updateLibrary(library: LibraryInput!): Boolean
  removeLibrary(id: ID!): Boolean
  addBook(book: BookInput!): Book!
  updateBook(book: BookInput!): Boolean
  removeBook(id: ID!): Boolean
}

input SearchBooksQuery {
  page: Int! @constraint(min: 1)
  keywords: [String!]!
}

type PaginatedBooksList {
  total: Int!
  itemsPerPage: Int!
  books: [Book]!
}

type Library {
  id: ID!
  name: String!
  description: String
  booksCount: Int!
}

input LibraryInput {
  id: ID
  name: String!
  description: String
}

type LibraryDetail {
  id: ID!
  name: String!
  description: String
  content: PaginatedBooksList
}

input BookInput {
  id: ID
  title: String!
  description: String = ""
  isbn10: String = ""
  isbn13: String = ""
  thumbnail: String = ""
  authors: [String] = []
  tags: [String] = []
  bookSet: String = ""
  bookSetOrder: Int = 0
  language: String = "fr"
  libraryId: ID
}

type Book {
  id: ID!
  title: String!
  description: String
  isbn10: String
  isbn13: String
  thumbnail: String
  authors: [String]
  tags: [String]
  bookSet: String
  bookSetOrder: Int
  language: String
  lendingId: ID
  library: Library!
}

type Contact {
  id: ID!
  nickname: String!
  thumbnail: String
}

type ContactInput {
  id: ID
  nickname: String!
  thumbnail: String
}
